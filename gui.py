"""
GUI –º–æ–¥—É–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤
–í–µ—Ä—Å–∏—è —Å config.py –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∏–ø–æ–≤ –æ—Ç—á—ë—Ç–æ–≤
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
from datetime import datetime
from logic import ReportLogic, find_form_file
import subprocess
import os
import sys
import config
from telegram_service import TelegramService, validate_settings
from telegram_config import save_telegram_settings, load_telegram_settings


class ReportApp:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å GUI"""

    def __init__(self, root):
        self.root = root
        self.root.title(config.APP_TITLE)

        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        if os.name == 'nt':  # Windows
            fonts = config.FONTS_WINDOWS
            padding = config.PADDING_WINDOWS
        else:  # macOS/Linux
            fonts = config.FONTS_MACOS
            padding = config.PADDING_MACOS

        self.FONT_TITLE = fonts["title"]
        self.FONT_LARGE = fonts["large"]
        self.FONT_MEDIUM = fonts["medium"]
        self.FONT_SMALL = fonts["small"]
        self.PADY = padding["pady"]
        self.PADX = padding["padx"]
        self.COMMENT_HEIGHT = config.COMMENT_HEIGHT
        self.BUTTON_WIDTH = config.BUTTON_WIDTH

        # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –æ–∫–Ω–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        try:
            if os.name == 'nt':
                self.root.state('zoomed')
            else:
                screen_width = self.root.winfo_screenwidth()
                screen_height = self.root.winfo_screenheight()
                self.root.geometry(f"{screen_width}x{screen_height}+0+0")
        except:
            self.root.geometry("1400x900")

        self.logic = ReportLogic()
        self.current_block_widgets = {}

        self.main_frame = tk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True)

        self.show_main_menu()

    def clear_frame(self):
        """–û—á–∏—Å—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        for widget in self.main_frame.winfo_children():
            widget.destroy()

    def show_main_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å README —Å–ª–µ–≤–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —Å–ø—Ä–∞–≤–∞"""
        self.clear_frame()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(
            self.main_frame,
            text=config.APP_TITLE,
            font=("Arial", self.FONT_TITLE + 4, "bold")
        ).pack(pady=30)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–≤—É—Ö –∫–æ–ª–æ–Ω–æ–∫
        content_frame = tk.Frame(self.main_frame)
        content_frame.pack(fill=tk.BOTH, expand=True, padx=40)

        # –õ–ï–í–ê–Ø –ö–û–õ–û–ù–ö–ê - README
        left_frame = tk.Frame(content_frame)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 20))

        readme_frame = tk.LabelFrame(
            left_frame,
            text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
            font=("Arial", self.FONT_MEDIUM + 1, "bold"),
            padx=20,
            pady=15
        )
        readme_frame.pack(fill=tk.BOTH, expand=True)

        readme_text = """
–ö–ê–ö –ù–ê–ß–ê–¢–¨ –†–ê–ë–û–¢–£:

1. –ü–†–ò –ü–ï–†–í–û–ú –ó–ê–ü–£–°–ö–ï
   –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫–∏ —Ä—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º:
   ‚Ä¢ —Ñ–æ—Ä–º—ã/ - –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
   ‚Ä¢ –æ—Ç—á–µ—Ç—ã/ - –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
   ‚Ä¢ —à–∞–±–ª–æ–Ω—ã/ - –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤-–æ–±—Ä–∞–∑—Ü–æ–≤

2. –ü–û–î–ì–û–¢–û–í–ö–ê –§–ê–ô–õ–û–í –° –í–û–ü–†–û–°–ê–ú–ò
   –í –ø–∞–ø–∫—É "—Ñ–æ—Ä–º—ã/" –ø–æ–º–µ—Å—Ç–∏—Ç–µ Excel —Ñ–∞–π–ª—ã (.xlsx) —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:

   –§–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã (4 –∫–æ–ª–æ–Ω–∫–∏):
   | –í–æ–ø—Ä–æ—Å | –ì–û–°–¢ –ò–°–û 9001 | –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É | –î–æ–∫—É–º–µ–Ω—Ç—ã |

   –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏—Ö –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç)
   –°–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ - –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

3. –ù–ê–ó–í–ê–ù–ò–Ø –§–ê–ô–õ–û–í
   ‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å_1.xlsx - –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á—ë—Ç—ã (–∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤)
   ‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å_2.xlsx - –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ (–º–∞—Ä—Ç, –∏—é–Ω—å, —Å–µ–Ω—Ç—è–±—Ä—å, –¥–µ–∫–∞–±—Ä—å)
   ‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å_3.xlsx - –≥–æ–¥–æ–≤—ã–µ (—è–Ω–≤–∞—Ä—å, –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫)
   ‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å.xlsx - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π (–µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º)

   –ü—Ä–∏–º–µ—Ä: –ì–ª–∞–≤–Ω—ã–π_–∏–Ω–∂–µ–Ω–µ—Ä_1.xlsx, –î–∏—Ä–µ–∫—Ç–æ—Ä_2.xlsx

4. –°–û–ó–î–ê–ù–ò–ï –û–¢–ß–Å–¢–ê
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü - –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –æ—Ç—á—ë—Ç–∞
   ‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã (–î–ê/–ù–ï–¢) –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ "–æ—Ç—á–µ—Ç—ã/"

5. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û
   ‚Ä¢ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å/–í—Å—Ç–∞–≤–∏—Ç—å - —á–µ—Ä–µ–∑ –º–µ–Ω—é Edit
   ‚Ä¢ –®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ö—Ä–∞–Ω–∏—Ç–µ –≤ "—à–∞–±–ª–æ–Ω—ã/"
        """

        tk.Label(
            readme_frame,
            text=readme_text.strip(),
            font=("Arial", self.FONT_SMALL + 1),
            justify=tk.LEFT,
            anchor='nw'
        ).pack(fill=tk.BOTH, expand=True)

        # –ü–†–ê–í–ê–Ø –ö–û–õ–û–ù–ö–ê - –ö–Ω–æ–ø–∫–∏
        right_frame = tk.Frame(content_frame)
        right_frame.pack(side=tk.RIGHT, fill=tk.Y)

        # –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        tk.Frame(right_frame, height=100).pack()

        tk.Button(
            right_frame,
            text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç",
            font=("Arial", self.FONT_MEDIUM),
            width=self.BUTTON_WIDTH,
            height=2,
            command=self.show_report_creation
        ).pack(pady=self.PADY * 2)

        tk.Button(
            right_frame,
            text="–ê—Ä—Ö–∏–≤ –æ—Ç—á—ë—Ç–æ–≤",
            font=("Arial", self.FONT_MEDIUM),
            width=self.BUTTON_WIDTH,
            height=2,
            command=self.show_reports_archive
        ).pack(pady=self.PADY * 2)

        tk.Button(
            right_frame,
            text="–í—ã—Ö–æ–¥",
            font=("Arial", self.FONT_MEDIUM),
            width=self.BUTTON_WIDTH,
            height=2,
            command=self.root.quit
        ).pack(pady=self.PADY * 2)

    def show_report_creation(self):
        """–≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç—á—ë—Ç–∞"""
        self.clear_frame()
        tk.Label(
            self.main_frame,
            text="–ù–æ–≤—ã–π –æ—Ç—á—ë—Ç",
            font=("Arial", self.FONT_TITLE, "bold")
        ).pack(pady=30)

        form_frame = tk.Frame(self.main_frame)
        form_frame.pack(pady=20)

        # –í—ã–±–æ—Ä —Ñ–æ—Ä–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ "—Ñ–æ—Ä–º—ã"
        tk.Label(
            form_frame,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É:",
            font=("Arial", self.FONT_MEDIUM)
        ).grid(row=0, column=0, sticky="w", pady=self.PADY * 2)

        self.form_var = tk.StringVar()
        forms = self.logic.load_forms_list()

        if not forms:
            messagebox.showerror(
                config.DIALOG_TITLES["error"],
                config.ERROR_MESSAGES["no_forms"]
            )
            self.show_main_menu()
            return

        ttk.Combobox(
            form_frame,
            textvariable=self.form_var,
            values=forms,
            font=("Arial", self.FONT_MEDIUM),
            width=30,
            state="readonly"
        ).grid(row=0, column=1, pady=self.PADY * 2, padx=self.PADX)

        # –ú–µ—Å—è—Ü
        tk.Label(
            form_frame,
            text="–ú–µ—Å—è—Ü:",
            font=("Arial", self.FONT_MEDIUM)
        ).grid(row=1, column=0, sticky="w", pady=self.PADY * 2)

        self.month_var = tk.StringVar()
        months = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        ttk.Combobox(
            form_frame,
            textvariable=self.month_var,
            values=months,
            font=("Arial", self.FONT_MEDIUM),
            width=30,
            state="readonly"
        ).grid(row=1, column=1, columnspan=2, pady=self.PADY * 2, padx=self.PADX, sticky="w")

        # –ì–æ–¥
        tk.Label(
            form_frame,
            text="–ì–æ–¥:",
            font=("Arial", self.FONT_MEDIUM)
        ).grid(row=2, column=0, sticky="w", pady=self.PADY * 2)

        self.year_var = tk.StringVar(value=str(datetime.now().year))
        tk.Entry(
            form_frame,
            textvariable=self.year_var,
            font=("Arial", self.FONT_MEDIUM),
            width=32
        ).grid(row=2, column=1, columnspan=2, pady=self.PADY * 2, padx=self.PADX, sticky="w")

        # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        tk.Label(
            form_frame,
            text="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:",
            font=("Arial", self.FONT_MEDIUM)
        ).grid(row=3, column=0, sticky="w", pady=self.PADY * 2)

        self.date_var = tk.StringVar(value=datetime.now().strftime("%d.%m.%Y"))
        tk.Entry(
            form_frame,
            textvariable=self.date_var,
            font=("Arial", self.FONT_MEDIUM),
            width=32
        ).grid(row=3, column=1, columnspan=2, pady=self.PADY * 2, padx=self.PADX, sticky="w")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = tk.Frame(self.main_frame)
        btn_frame.pack(pady=30)

        tk.Button(
            btn_frame,
            text="–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",
            font=("Arial", self.FONT_MEDIUM),
            width=20,
            command=self.start_filling
        ).pack(side=tk.LEFT, padx=self.PADX)

        tk.Button(
            btn_frame,
            text="–ù–∞–∑–∞–¥",
            font=("Arial", self.FONT_MEDIUM),
            width=20,
            command=self.show_main_menu
        ).pack(side=tk.LEFT, padx=self.PADX)

    def start_filling(self):
        """–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞"""
        form_name = self.form_var.get()
        month = self.month_var.get()
        year = self.year_var.get()
        report_date = self.date_var.get()

        if not all([form_name, month, year, report_date]):
            messagebox.showerror(
                config.DIALOG_TITLES["error"],
                config.ERROR_MESSAGES["fill_all_fields"]
            )
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞ —Å —É—á—ë—Ç–æ–º —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞
        excel_file, filename = find_form_file(form_name, month)

        if not excel_file:
            messagebox.showerror(
                config.DIALOG_TITLES["error"],
                f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Ñ–æ—Ä–º—ã –¥–ª—è:\n{form_name}\n\n–û–∂–∏–¥–∞–µ—Ç—Å—è –æ–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤:\n{form_name}_1.xlsx (–º–µ—Å—è—á–Ω—ã–π)\n{form_name}_2.xlsx (–∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π)\n{form_name}_3.xlsx (–≥–æ–¥–æ–≤–æ–π)\n–∏–ª–∏\n{form_name}.xlsx (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)"
            )
            return

        if not self.logic.load_questions_from_excel(excel_file):
            messagebox.showerror(
                config.DIALOG_TITLES["error"],
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞:\n{filename}"
            )
            return

        self.logic.init_report(form_name, month, year, report_date)
        self.show_questions_screen()

    def show_questions_screen(self):
        """–≠–∫—Ä–∞–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –±–ª–æ–∫–∞–º–∏"""
        self.clear_frame()

        start, end = self.logic.get_current_block_questions()
        total = len(self.logic.questions_list)

        header = f"–û—Ç—á—ë—Ç: {self.logic.current_report_data['form_name']} {self.logic.current_report_data['month']} {self.logic.current_report_data['year']}"
        tk.Label(
            self.main_frame,
            text=header,
            font=("Arial", self.FONT_MEDIUM, "bold")
        ).pack(pady=self.PADY)

        tk.Label(
            self.main_frame,
            text=f"–í–æ–ø—Ä–æ—Å—ã {start + 1}-{end} –∏–∑ {total}",
            font=("Arial", self.FONT_SMALL)
        ).pack(pady=self.PADY // 2)

        canvas_frame = tk.Frame(self.main_frame)
        canvas_frame.pack(pady=self.PADY, fill=tk.BOTH, expand=True)

        canvas = tk.Canvas(canvas_frame)
        scrollbar = tk.Scrollbar(canvas_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas)

        scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        self.current_block_widgets = {}
        for i in range(start, end):
            self.create_question_widget(scrollable_frame, i)

        btn_frame = tk.Frame(self.main_frame)
        btn_frame.pack(pady=self.PADY * 2)

        btn_prev = tk.Button(
            btn_frame,
            text="‚Üê –ù–∞–∑–∞–¥",
            font=("Arial", self.FONT_LARGE),
            width=15,
            command=self.on_prev_block
        )
        btn_prev.pack(side=tk.LEFT, padx=self.PADX)
        if start == 0:
            btn_prev.config(state=tk.DISABLED)

        btn_next = tk.Button(
            btn_frame,
            text="–î–∞–ª–µ–µ ‚Üí" if end < total else "–ó–∞–≤–µ—Ä—à–∏—Ç—å",
            font=("Arial", self.FONT_LARGE),
            width=15,
            command=self.on_next_block
        )
        btn_next.pack(side=tk.LEFT, padx=self.PADX)

    def create_question_widget(self, parent, question_index):
        """–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        question = self.logic.questions_list[question_index]
        answer_data = self.logic.answers_list[question_index]

        q_frame = tk.LabelFrame(
            parent,
            text=f"–í–æ–ø—Ä–æ—Å {question_index + 1}",
            font=("Arial", self.FONT_MEDIUM, "bold"),
            padx=self.PADX,
            pady=self.PADY
        )
        q_frame.pack(pady=self.PADY, padx=20, fill=tk.X)

        top_frame = tk.Frame(q_frame)
        top_frame.pack(fill=tk.X, pady=self.PADY // 2)

        answer_frame = tk.Frame(top_frame)
        answer_frame.pack(side=tk.LEFT, padx=(0, 15))

        current_answer = answer_data['answer_yes_no']

        btn_yes = tk.Button(
            answer_frame,
            text="–î–ê",
            font=("Arial", self.FONT_LARGE, "bold"),
            width=5,
            bg="green" if current_answer == "–î–∞" else "lightgray",
            fg="white" if current_answer == "–î–∞" else "darkgreen",
            command=lambda idx=question_index: self.set_answer(idx, "–î–∞")
        )
        btn_yes.pack(side=tk.LEFT, padx=3)

        btn_no = tk.Button(
            answer_frame,
            text="–ù–ï–¢",
            font=("Arial", self.FONT_LARGE, "bold"),
            width=5,
            bg="red" if current_answer == "–ù–µ—Ç" else "lightgray",
            fg="white" if current_answer == "–ù–µ—Ç" else "darkred",
            command=lambda idx=question_index: self.set_answer(idx, "–ù–µ—Ç")
        )
        btn_no.pack(side=tk.LEFT, padx=3)

        tk.Label(
            top_frame,
            text=question['question'],
            font=("Arial", self.FONT_LARGE),
            wraplength=800,
            justify=tk.LEFT,
            anchor='w'
        ).pack(side=tk.LEFT, fill=tk.X, expand=True)

        buttons_frame = tk.Frame(top_frame)
        buttons_frame.pack(side=tk.RIGHT, padx=self.PADX)

        tk.Button(
            buttons_frame,
            text="?",
            font=("Arial", self.FONT_MEDIUM, "bold"),
            width=3,
            command=lambda: self.show_help(question)
        ).pack(side=tk.LEFT, padx=2)

        if question.get('documents'):
            tk.Button(
                buttons_frame,
                text="üìÑ",
                font=("Arial", self.FONT_MEDIUM, "bold"),
                width=3,
                command=lambda: self.show_documents(question)
            ).pack(side=tk.LEFT, padx=2)

        comment_frame = tk.Frame(q_frame)
        comment_frame.pack(fill=tk.X, pady=self.PADY // 2)

        tk.Label(
            comment_frame,
            text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
            font=("Arial", self.FONT_LARGE)
        ).pack(side=tk.LEFT, padx=(0, self.PADX))

        comment_text = tk.Text(
            comment_frame,
            height=self.COMMENT_HEIGHT,
            font=("Arial", self.FONT_LARGE),
            wrap=tk.WORD
        )
        comment_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        if answer_data['comment']:
            comment_text.insert(1.0, answer_data['comment'])

        def adjust_height(event=None):
            lines = comment_text.get("1.0", tk.END).count('\n')
            comment_text.config(height=max(self.COMMENT_HEIGHT, min(6, lines + 1)))

        comment_text.bind('<KeyRelease>', adjust_height)
        adjust_height()

        self.current_block_widgets[question_index] = {
            'btn_yes': btn_yes,
            'btn_no': btn_no,
            'comment': comment_text
        }

    def set_answer(self, question_index, answer):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –∏–Ω–≤–µ—Ä—Å–∏–µ–π —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–æ–∫"""
        widgets = self.current_block_widgets[question_index]

        if answer == "–î–∞":
            widgets['btn_yes'].config(bg="green", fg="white")
            widgets['btn_no'].config(bg="lightgray", fg="darkred")
        else:
            widgets['btn_yes'].config(bg="lightgray", fg="darkgreen")
            widgets['btn_no'].config(bg="red", fg="white")

        comment = widgets['comment'].get(1.0, tk.END).strip()
        self.logic.save_answer(question_index, answer, comment)

    def show_help(self, question):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_window = tk.Toplevel(self.root)
        help_window.title(config.DIALOG_TITLES["help"])
        help_window.geometry("1000x700")

        tk.Label(
            help_window,
            text="–ì–û–°–¢ –ò–°–û 9001:",
            font=("Arial", self.FONT_SMALL, "bold")
        ).pack(pady=(15, self.PADY))

        gost_text = scrolledtext.ScrolledText(
            help_window,
            height=3,
            width=110,
            font=("Arial", self.FONT_SMALL),
            wrap=tk.WORD
        )
        gost_text.pack(pady=self.PADY, padx=20, fill=tk.X)
        gost_text.insert(1.0, question['gost'] or "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        gost_text.config(state=tk.DISABLED)

        tk.Label(
            help_window,
            text="–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É:",
            font=("Arial", self.FONT_SMALL, "bold")
        ).pack(pady=(15, self.PADY))

        quality_text = scrolledtext.ScrolledText(
            help_window,
            width=110,
            font=("Arial", self.FONT_SMALL),
            wrap=tk.WORD
        )
        quality_text.pack(pady=self.PADY, padx=20, fill=tk.BOTH, expand=True)
        quality_text.insert(1.0, question['quality'] or "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        quality_text.config(state=tk.DISABLED)

        tk.Button(
            help_window,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            font=("Arial", self.FONT_SMALL - 2),
            width=20,
            command=help_window.destroy
        ).pack(pady=20)

    def show_documents(self, question):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        docs = question.get('documents', '')

        if not docs:
            messagebox.showinfo(
                config.DIALOG_TITLES["documents"],
                "–î–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            )
            return

        doc_window = tk.Toplevel(self.root)
        doc_window.title(config.DIALOG_TITLES["documents"])
        doc_window.geometry("700x500")

        tk.Label(
            doc_window,
            text="–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
            font=("Arial", self.FONT_SMALL, "bold")
        ).pack(pady=15)

        text_widget = scrolledtext.ScrolledText(
            doc_window,
            height=18,
            width=80,
            font=("Arial", self.FONT_SMALL),
            wrap=tk.WORD
        )
        text_widget.pack(pady=self.PADY * 2, padx=20, fill=tk.BOTH, expand=True)
        text_widget.insert(1.0, docs)
        text_widget.config(state=tk.DISABLED)

        btn_frame = tk.Frame(doc_window)
        btn_frame.pack(pady=15)

        tk.Button(
            btn_frame,
            text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —à–∞–±–ª–æ–Ω–æ–≤",
            font=("Arial", self.FONT_SMALL - 2),
            command=self.open_templates_folder
        ).pack(side=tk.LEFT, padx=self.PADX)

        tk.Button(
            btn_frame,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            font=("Arial", self.FONT_SMALL - 2),
            command=doc_window.destroy
        ).pack(side=tk.LEFT, padx=self.PADX)

    def open_templates_folder(self):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —à–∞–±–ª–æ–Ω–æ–≤"""
        templates_path = os.path.abspath(config.TEMPLATES_FOLDER.rstrip('/'))

        if not os.path.exists(templates_path):
            os.makedirs(templates_path)
            messagebox.showinfo(
                config.DIALOG_TITLES["info"],
                config.INFO_MESSAGES["templates_folder_created"]
            )

        try:
            if os.name == 'nt':
                os.startfile(templates_path)
            elif sys.platform == 'darwin':
                subprocess.Popen(['open', templates_path])
            else:
                subprocess.Popen(['xdg-open', templates_path])
        except Exception as e:
            messagebox.showerror(
                config.DIALOG_TITLES["error"],
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É:\n{e}"
            )

    def save_current_block(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞"""
        for idx, widgets in self.current_block_widgets.items():
            comment = widgets['comment'].get(1.0, tk.END).strip()
            current_answer = self.logic.answers_list[idx]['answer_yes_no']
            if current_answer:
                self.logic.save_answer(idx, current_answer, comment)

    def on_prev_block(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
        self.save_current_block()
        self.logic.prev_block()
        self.show_questions_screen()

    def on_next_block(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –î–∞–ª–µ–µ/–ó–∞–≤–µ—Ä—à–∏—Ç—å"""
        for idx in self.current_block_widgets.keys():
            if not self.logic.answers_list[idx]['answer_yes_no']:
                messagebox.showwarning(
                    config.DIALOG_TITLES["warning"],
                    f"{config.ERROR_MESSAGES['no_answer']} {idx + 1}"
                )
                return

        self.save_current_block()

        if not self.logic.next_block():
            # –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
            if messagebox.askyesno(
                config.DIALOG_TITLES["confirm_save"],
                config.INFO_MESSAGES["all_questions_answered"]
            ):
                self.save_report()
        else:
            self.show_questions_screen()

    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç"""
        success, result = self.logic.save_report()
        if success:
            messagebox.showinfo(
                config.DIALOG_TITLES["success"],
                config.INFO_MESSAGES["report_saved"].format(
                    filename=result,
                    folder=config.REPORTS_FOLDER
                )
            )
            self.show_main_menu()
        else:
            messagebox.showerror(
                config.DIALOG_TITLES["error"],
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:\n{result}"
            )

    def show_reports_archive(self):
        """–ê—Ä—Ö–∏–≤ –æ—Ç—á—ë—Ç–æ–≤"""
        self.clear_frame()
        tk.Label(
            self.main_frame,
            text="–ê—Ä—Ö–∏–≤ –æ—Ç—á—ë—Ç–æ–≤",
            font=("Arial", self.FONT_LARGE, "bold")
        ).pack(pady=20)

        reports = self.logic.get_all_reports_from_db()
        if not reports:
            tk.Label(
                self.main_frame,
                text=config.INFO_MESSAGES["no_reports"],
                font=("Arial", self.FONT_SMALL)
            ).pack(pady=20)
        else:
            tree = self.create_reports_tree(
                reports,
                ["ID", "–§–æ—Ä–º–∞", "–ú–µ—Å—è—Ü", "–ì–æ–¥", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"],
                [50, 250, 100, 80, 150]
            )

            btn_frame = tk.Frame(self.main_frame)
            btn_frame.pack(pady=20)

            tk.Button(
                btn_frame,
                text="–ü—Ä–æ—Å–º–æ—Ç—Ä",
                font=("Arial", self.FONT_SMALL),
                width=20,
                command=lambda: self.open_report(tree)
            ).pack(side=tk.LEFT, padx=self.PADX)

            tk.Button(
                btn_frame,
                text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram",
                font=("Arial", self.FONT_SMALL),
                width=25,
                command=lambda: self.send_report_to_telegram(tree)
            ).pack(side=tk.LEFT, padx=self.PADX)

            tk.Button(
                btn_frame,
                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ TG",
                font=("Arial", self.FONT_SMALL),
                width=18,
                command=self.open_telegram_settings
            ).pack(side=tk.LEFT, padx=self.PADX)

            tk.Button(
                btn_frame,
                text="–£–¥–∞–ª–∏—Ç—å",
                font=("Arial", self.FONT_SMALL),
                width=20,
                command=lambda: self.delete_report(tree)
            ).pack(side=tk.LEFT, padx=self.PADX)

        tk.Button(
            self.main_frame,
            text="–ù–∞–∑–∞–¥",
            font=("Arial", self.FONT_SMALL),
            width=20,
            command=self.show_main_menu
        ).pack(pady=self.PADY * 2)

    def create_reports_tree(self, reports, columns, widths=None):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –æ—Ç—á—ë—Ç–æ–≤"""
        tree_frame = tk.Frame(self.main_frame)
        tree_frame.pack(pady=self.PADY * 2, padx=20, fill=tk.BOTH, expand=True)

        scrollbar = tk.Scrollbar(tree_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        tree = ttk.Treeview(
            tree_frame,
            columns=columns,
            show="headings",
            yscrollcommand=scrollbar.set
        )
        scrollbar.config(command=tree.yview)

        for i, col in enumerate(columns):
            tree.heading(col, text=col)
            tree.column(col, width=widths[i] if widths else 150)

        for report in reports:
            values = [
                report['id'],
                report['form_name'],
                report['month'],
                report['year'],
                report['created_at']
            ]
            tree.insert("", tk.END, values=values)

        tree.pack(fill=tk.BOTH, expand=True)
        return tree

    def open_report(self, tree):
        """–û—Ç–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning(
                config.DIALOG_TITLES["warning"],
                config.ERROR_MESSAGES["select_report"]
            )
            return

        report_id = tree.item(selected[0])['values'][0]
        report_data = self.logic.get_report_from_db(report_id)

        if report_data:
            self.view_report(report_data)
        else:
            messagebox.showerror(
                config.DIALOG_TITLES["error"],
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç"
            )

    def view_report(self, report_data):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á—ë—Ç–∞"""
        self.clear_frame()

        header = f"{report_data['form_name']} - {report_data['month']} {report_data['year']}"
        tk.Label(
            self.main_frame,
            text=header,
            font=("Arial", self.FONT_MEDIUM, "bold")
        ).pack(pady=20)

        info = f"–î–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞: {report_data['report_date']}\n–°–æ–∑–¥–∞–Ω: {report_data['created_at']}"
        tk.Label(
            self.main_frame,
            text=info,
            font=("Arial", self.FONT_SMALL - 1)
        ).pack(pady=self.PADY)

        text_frame = tk.Frame(self.main_frame)
        text_frame.pack(pady=self.PADY * 2, padx=20, fill=tk.BOTH, expand=True)

        text_widget = scrolledtext.ScrolledText(
            text_frame,
            font=("Arial", self.FONT_SMALL - 1),
            wrap=tk.WORD
        )
        text_widget.pack(fill=tk.BOTH, expand=True)

        for i, answer in enumerate(report_data['answers']):
            text_widget.insert(tk.END, f"\n{i+1}. {answer['question_text']}\n", "bold")
            text_widget.insert(tk.END, f"–û—Ç–≤–µ—Ç: {answer['answer_yes_no']}\n")
            if answer['comment']:
                text_widget.insert(tk.END, f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {answer['comment']}\n")
            text_widget.insert(tk.END, "\n" + "-"*80 + "\n")

        text_widget.tag_config("bold", font=("Arial", self.FONT_SMALL - 1, "bold"))
        text_widget.config(state=tk.DISABLED)

        tk.Button(
            self.main_frame,
            text="–ù–∞–∑–∞–¥",
            font=("Arial", self.FONT_SMALL),
            width=20,
            command=self.show_reports_archive
        ).pack(pady=20)

    def delete_report(self, tree):
        """–£–¥–∞–ª–∏—Ç—å –æ—Ç—á—ë—Ç"""
        selected = tree.selection()
        if not selected:
            messagebox.showwarning(
                config.DIALOG_TITLES["warning"],
                config.ERROR_MESSAGES["select_report"]
            )
            return

        item = tree.item(selected[0])
        report_id = item['values'][0]
        report_name = f"{item['values'][1]} {item['values'][2]} {item['values'][3]}"

        if messagebox.askyesno(
            config.DIALOG_TITLES["confirm_delete"],
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç—á—ë—Ç:\n{report_name}?"
        ):
            success, message = self.logic.delete_report_from_db(report_id)
            if success:
                messagebox.showinfo(config.DIALOG_TITLES["success"], message)
                self.show_reports_archive()
            else:
                messagebox.showerror(
                    config.DIALOG_TITLES["error"],
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:\n{message}"
                )

    def open_telegram_settings(self):
        """–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram (–¥–ª—è –∫–Ω–æ–ø–∫–∏ ‚öôÔ∏è)"""
        self.show_telegram_settings()

    def send_report_to_telegram(self, tree):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –≤ Telegram"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç—á—ë—Ç–∞
        selected = tree.selection()
        if not selected:
            messagebox.showwarning(
                config.DIALOG_TITLES["warning"],
                config.ERROR_MESSAGES["select_report"]
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç—á—ë—Ç–∞
        report_id = tree.item(selected[0])['values'][0]

        # –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å Telegram
        telegram = TelegramService()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not telegram.is_configured():
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.show_telegram_settings(report_id)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
        success, message = telegram.send_report(report_id)

        if success:
            messagebox.showinfo("Telegram", message)
        else:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–Ω–æ–≤–æ
            if messagebox.askyesno(
                "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
                f"{message}\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram?"
            ):
                self.show_telegram_settings(report_id)

    def show_telegram_settings(self, report_id=None):
        """–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram"""
        settings_window = tk.Toplevel(self.root)
        settings_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram")
        settings_window.geometry("600x500")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(
            settings_window,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞",
            font=("Arial", self.FONT_MEDIUM, "bold")
        ).pack(pady=15)

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction_frame = tk.LabelFrame(
            settings_window,
            text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
            font=("Arial", self.FONT_SMALL, "bold"),
            padx=10,
            pady=10
        )
        instruction_frame.pack(pady=10, padx=20, fill=tk.BOTH, expand=True)

        instruction_text = scrolledtext.ScrolledText(
            instruction_frame,
            height=10,
            width=65,
            font=("Arial", self.FONT_SMALL - 1),
            wrap=tk.WORD
        )
        instruction_text.pack(fill=tk.BOTH, expand=True)
        instruction_text.insert(1.0, config.TELEGRAM_SETUP_INFO)
        instruction_text.config(state=tk.DISABLED)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        fields_frame = tk.Frame(settings_window)
        fields_frame.pack(pady=10, padx=20, fill=tk.X)

        # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        tk.Label(
            fields_frame,
            text="–¢–æ–∫–µ–Ω –±–æ—Ç–∞:",
            font=("Arial", self.FONT_SMALL)
        ).grid(row=0, column=0, sticky="w", pady=5)

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        saved_token, saved_chat_id = load_telegram_settings()
        token_var = tk.StringVar(value=saved_token or config.TELEGRAM_BOT_TOKEN)
        token_entry = tk.Entry(
            fields_frame,
            textvariable=token_var,
            font=("Arial", self.FONT_SMALL),
            width=45
        )
        token_entry.grid(row=0, column=1, pady=5, padx=10)

        # Chat ID
        tk.Label(
            fields_frame,
            text="Chat ID:",
            font=("Arial", self.FONT_SMALL)
        ).grid(row=1, column=0, sticky="w", pady=5)

        chat_id_var = tk.StringVar(value=saved_chat_id or config.TELEGRAM_CHAT_ID)
        chat_id_entry = tk.Entry(
            fields_frame,
            textvariable=chat_id_var,
            font=("Arial", self.FONT_SMALL),
            width=45
        )
        chat_id_entry.grid(row=1, column=1, pady=5, padx=10)

        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(settings_window)
        buttons_frame.pack(pady=15)

        def save_settings():
            """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config.py"""
            token = token_var.get().strip()
            chat_id = chat_id_var.get().strip()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            valid, error = validate_settings(token, chat_id)
            if not valid:
                messagebox.showerror("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", error)
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ config (–≤ –ø–∞–º—è—Ç–∏)
            config.TELEGRAM_BOT_TOKEN = token
            config.TELEGRAM_CHAT_ID = chat_id

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ
            save_telegram_settings(token, chat_id)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            telegram = TelegramService()
            success, message = telegram.test_connection()

            if success:
                messagebox.showinfo("–£—Å–ø–µ—Ö", message)
                settings_window.destroy()

                # –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω report_id - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
                if report_id:
                    success, msg = telegram.send_report(report_id)
                    if success:
                        messagebox.showinfo("Telegram", msg)
                    else:
                        messagebox.showerror("–û—à–∏–±–∫–∞", msg)
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", message)

        tk.Button(
            buttons_frame,
            text="–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            font=("Arial", self.FONT_SMALL),
            width=30,
            command=save_settings
        ).pack(side=tk.LEFT, padx=5)

        tk.Button(
            buttons_frame,
            text="–û—Ç–º–µ–Ω–∞",
            font=("Arial", self.FONT_SMALL),
            width=15,
            command=settings_window.destroy
        ).pack(side=tk.LEFT, padx=5)