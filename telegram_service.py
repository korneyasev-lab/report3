# -*- coding: utf-8 -*-
"""
telegram_service.py ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ –≤ Telegram
"""

import json
import ssl
from urllib import request, error, parse
from database import get_report_by_id
import config


class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –≤ Telegram"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.bot_token = getattr(config, 'TELEGRAM_BOT_TOKEN', '')
        self.chat_id = getattr(config, 'TELEGRAM_CHAT_ID', '')
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"

    def is_configured(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç–æ–∫–µ–Ω –∏ chat_id –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"""
        return bool(self.bot_token.strip() and self.chat_id.strip())

    def send_report(self, report_id):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –≤ Telegram

        Args:
            report_id: ID –æ—Ç—á—ë—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        Returns:
            tuple: (success: bool, message: str)
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not self.is_configured():
            return False, "Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ chat_id –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç–∞ –∏–∑ –ë–î
            report_data = get_report_by_id(report_id)

            if not report_data:
                return False, f"–û—Ç—á—ë—Ç —Å ID {report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = self._format_message(report_data)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–ª–∏–º–∏—Ç Telegram 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(message_text) > 4096:
                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏
                return self._send_long_message(message_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            success = self._send_to_telegram(message_text)

            if success:
                return True, "‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram"
            else:
                return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram"

        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"

    def _format_message(self, report_data):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram

        Args:
            report_data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç—á—ë—Ç–∞ –∏–∑ –ë–î

        Returns:
            str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        lines = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = f"üìã {report_data['form_name']} - {report_data['month']} {report_data['year']}"
        lines.append(header)
        lines.append(f"üìÖ –î–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞: {report_data['report_date']}")
        lines.append(f"üïê –°–æ–∑–¥–∞–Ω: {report_data['created_at']}")
        lines.append("")
        lines.append("‚îÄ" * 40)
        lines.append("")

        # –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        for i, answer in enumerate(report_data['answers'], 1):
            question = answer['question_text']
            ans = answer['answer_yes_no']
            comment = answer.get('comment', '').strip()

            # –ù–æ–º–µ—Ä –∏ –≤–æ–ø—Ä–æ—Å
            lines.append(f"{i}. {question}")

            # –û—Ç–≤–µ—Ç —Å —ç–º–æ–¥–∑–∏
            if ans == "–î–∞":
                lines.append(f"‚úÖ –û—Ç–≤–µ—Ç: –î–∞")
            elif ans == "–ù–µ—Ç":
                lines.append(f"‚ùå –û—Ç–≤–µ—Ç: –ù–µ—Ç")
            else:
                lines.append(f"‚ñ™Ô∏è –û—Ç–≤–µ—Ç: {ans}")

            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
            if comment:
                lines.append(f"üí¨ {comment}")

            lines.append("")

        lines.append("‚îÄ" * 40)
        lines.append(f"üìä –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(report_data['answers'])}")

        return "\n".join(lines)

    def _send_to_telegram(self, text):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ Telegram —á–µ—Ä–µ–∑ Bot API

        Args:
            text: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = {
                'chat_id': self.chat_id,
                'text': text
            }

            # –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            data_encoded = parse.urlencode(data).encode('utf-8')

            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å
            req = request.Request(self.api_url, data=data_encoded, method='POST')

            # SSL context –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–¥–ª—è macOS)
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            with request.urlopen(req, timeout=15, context=ssl_context) as response:
                result = json.loads(response.read().decode('utf-8'))

                if config.DEBUG_MODE:
                    print(f"Telegram API response: {result}")

                return result.get('ok', False)

        except error.HTTPError as e:
            error_body = e.read().decode('utf-8') if e.fp else ""
            if config.DEBUG_MODE:
                print(f"HTTP –æ—à–∏–±–∫–∞ {e.code}: {e.reason}")
                print(f"–î–µ—Ç–∞–ª–∏: {error_body}")
            return False
        except error.URLError as e:
            if config.DEBUG_MODE:
                print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e.reason}")
            return False
        except Exception as e:
            if config.DEBUG_MODE:
                print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}")
            return False

    def _send_long_message(self, text):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏

        Args:
            text: –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

        Returns:
            tuple: (success: bool, message: str)
        """
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤ (—Å –∑–∞–ø–∞—Å–æ–º)
        max_length = 4000
        parts = []

        while text:
            if len(text) <= max_length:
                parts.append(text)
                break

            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
            split_pos = text.rfind('\n', 0, max_length)
            if split_pos == -1:
                split_pos = max_length

            parts.append(text[:split_pos])
            text = text[split_pos:].lstrip()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
        for i, part in enumerate(parts, 1):
            header = f"[–ß–∞—Å—Ç—å {i}/{len(parts)}]\n\n" if len(parts) > 1 else ""
            success = self._send_to_telegram(header + part)

            if not success:
                return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i} –∏–∑ {len(parts)}"

        return True, f"‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram ({len(parts)} —Å–æ–æ–±—â–µ–Ω–∏–π)"

    def test_connection(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)

        Returns:
            tuple: (success: bool, message: str)
        """
        if not self.is_configured():
            return False, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ chat_id"

        test_message = "üîî –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤"

        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = {
                'chat_id': self.chat_id,
                'text': test_message
            }

            # –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            data_encoded = parse.urlencode(data).encode('utf-8')

            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å
            req = request.Request(self.api_url, data=data_encoded, method='POST')

            # SSL context –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–¥–ª—è macOS)
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            with request.urlopen(req, timeout=15, context=ssl_context) as response:
                result = json.loads(response.read().decode('utf-8'))

                if result.get('ok'):
                    return True, "‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
                else:
                    error_desc = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    return False, f"‚ùå Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_desc}"

        except error.HTTPError as e:
            try:
                error_body = json.loads(e.read().decode('utf-8'))
                error_desc = error_body.get('description', str(e.reason))
            except:
                error_desc = str(e.reason)

            if e.code == 401:
                return False, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.\n\n–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É @BotFather"
            elif e.code == 400:
                return False, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Chat ID: {self.chat_id}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Chat ID —É @userinfobot"
            else:
                return False, f"‚ùå HTTP –æ—à–∏–±–∫–∞ {e.code}: {error_desc}"

        except error.URLError as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e.reason}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞: {type(e).__name__}: {str(e)}"


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è GUI
def get_telegram_service():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramService"""
    return TelegramService()


def validate_settings(bot_token, chat_id):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram

    Args:
        bot_token: —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        chat_id: ID —á–∞—Ç–∞

    Returns:
        tuple: (valid: bool, error_message: str or None)
    """
    if not bot_token or not bot_token.strip():
        return False, "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

    if not chat_id or not chat_id.strip():
        return False, "Chat ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    if ':' not in bot_token:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ chat_id —á–∏—Å–ª–æ–≤–æ–π –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -
    chat_id_clean = chat_id.strip()
    if not (chat_id_clean.lstrip('-').isdigit()):
        return False, "Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 –∏–ª–∏ -123456789)"

    return True, None